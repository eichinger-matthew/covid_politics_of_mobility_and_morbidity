geom_hline(yintercept = 1, linetype = 2) +
labs(x = "Caliper value", y = "Coefficient estimate",
title = "Marginal Preemption Effect of Democratic Status",
subtitle = "By caliper value used in matching procedure") +
theme_minimal() +
theme(panel.background = element_rect(linewidth = 1))
# plot ATE estimate with CI as f'n of caliper hyperparameter
fin %>%
filter(term == "dem_treat") %>%
ggplot(aes(x = caliper, y = estimate)) +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high)) +
geom_hline(yintercept = 1, linetype = 2) +
labs(x = "Caliper value", y = "Coefficient estimate",
title = "Marginal Preemption Effect of Democratic Status",
subtitle = "By caliper value used in matching procedure") +
theme_minimal() +
theme(axis.line = element_line())
# survival models
library(tidyverse)
library(ggsurvfit)
library(survival)
library(MatchIt)
library(survival)
library(broom)
library(marginaleffects)
# load
load("treatment_matching_results.RData")
# assign df
df <- match_res$glm[[5]]$adjusted_data
df <- mutate(df, dem_treat = ifelse(elect_winner == "Democrat", 1, 0))
View(df)
# add indicator for whether a county is dead at end period
df <- mutate(df, dem_treat = ifelse(elect_winner == "Democrat", 1, 0),
dead = 1)
# assign df
df <- match_res$glm[[5]]$adjusted_data
# add indicator for whether a county is dead at end period
df <-
df %>%
mutate(dem_treat = ifelse(elect_winner == "Democrat", 1, 0),
dead = 1)
# estimate model
fit <- coxph(Surv(surv_time, dead) ~
dem_treat, data = df, weights = weights)
summary(fit)
# plot kaplan-meier curve
plot(survfit(fit, newdata = data.frame("dem_treat" = c(0,1)), se.fit = TRUE))
# plot curve using ggsurvfit
ggsurvplot(fit, data = df)
# survival models
library(tidyverse)
library(ggsurvfit)
library(survival)
library(MatchIt)
library(survival)
library(broom)
survfit2(Surv(surv_time, dead) ~
dem_treat, data = df, weights = weights) %>%
tidy_survfit() %>%
ggplot(aes(x = time, y = estimate, linetype = strata)) +
geom_step() +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.1) +
labs(x = "Time", y = "Survival probability",
title = "Survival Curves for Treatment (Democratic) \nand Control (Republican) Groups") +
scale_linetype_manual(name = "Democratic", values = c(1, 2)) +
theme_minimal() +
theme(panel.background = element_rect(linewidth = 1))
# container
coefs <- list()
# loop over matching datasets
for(i in seq_along(match_res$glm)){
d <- match_res$glm[[i]]$adjusted_data
d <- mutate(d, dem_treat = ifelse(elect_winner == "Democrat", 1, 0))
# estimate model
fit <- coxph(Surv(survtime50_3consc) ~ dem_treat, data = d, weights = weights)
# assign to tibble
coefs[[i]] <- tidy(fit, exponentiate = TRUE, conf.int = TRUE)
# what to do at end
if(i == 10){
fin <- do.call(rbind, coefs)
}
}
# container
coefs <- list()
# loop over matching datasets
for(i in seq_along(match_res$glm)){
d <- match_res$glm[[i]]$adjusted_data
d <- mutate(d, dem_treat = ifelse(elect_winner == "Democrat", 1, 0))
# estimate model
fit <- coxph(Surv(surv_time, dead) ~ dem_treat, data = d, weights = weights)
# assign to tibble
coefs[[i]] <- tidy(fit, exponentiate = TRUE, conf.int = TRUE)
# what to do at end
if(i == 10){
fin <- do.call(rbind, coefs)
}
}
# container
coefs <- list()
# loop over matching datasets
for(i in seq_along(match_res$glm)){
d <- match_res$glm[[i]]$adjusted_data
d <- mutate(d, dem_treat = ifelse(elect_winner == "Democrat", 1, 0),
dead = 1)
# estimate model
fit <- coxph(Surv(surv_time, dead) ~ dem_treat, data = d, weights = weights)
# assign to tibble
coefs[[i]] <- tidy(fit, exponentiate = TRUE, conf.int = TRUE)
# what to do at end
if(i == 10){
fin <- do.call(rbind, coefs)
}
}
# get calipers
calips <- vector(mode = "numeric")
for(i in seq_along(match_res$glm)){
# get caliper
calips[i] <- match_res$glm[[i]]$matching_model$caliper[[1]]
}
View(coefs)
# container
coefs <- list()
# loop over matching datasets
for(i in seq_along(match_res$glm)){
d <- match_res$glm[[i]]$adjusted_data
d <- mutate(d, dem_treat = ifelse(elect_winner == "Democrat", 1, 0),
dead = 1)
# estimate model
fit <- coxph(Surv(surv_time, dead) ~ dem_treat, data = d, weights = weights)
# assign to tibble
cfs <- tidy(fit, exponentiate = TRUE, conf.int = TRUE)
# get caliper
calip <- match_res$glm[[i]]$matching_model$caliper[[1]]
cfs <- mutate(cfs, caliper = calip)
preempt_res[[i]] <- cfs
# what to do at end
if(i == 10){
fin <- do.call(rbind, coefs)
}
}
# container
coefs <- list()
# loop over matching datasets
for(i in seq_along(match_res$glm)){
d <- match_res$glm[[i]]$adjusted_data
d <- mutate(d, dem_treat = ifelse(elect_winner == "Democrat", 1, 0),
dead = 1)
# estimate model
fit <- coxph(Surv(surv_time, dead) ~ dem_treat, data = d, weights = weights)
# assign to tibble
cfs <- tidy(fit, exponentiate = TRUE, conf.int = TRUE)
# get caliper
calip <- match_res$glm[[i]]$matching_model$caliper[[1]]
cfs <- mutate(cfs, caliper = calip)
coefs[[i]] <- cfs
# what to do at end
if(i == 10){
fin <- do.call(rbind, coefs)
}
}
View(coefs)
View(fin)
# plot how dem ate varies as f'n of caliper hyperparameter
fin %>%
ggplot(aes(x = calips, y = estimate)) +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high)) +
geom_hline(yintercept = 1, linetype = 2) +
labs(x = "Caliper constraint value", y = "HR estimate (Democratic)",
title = "Hazard Ratios for the Discrete Effect of Democratic Status",
subtitle = "By caliper value used in matching procedure") +
theme_minimal() +
theme(panel.background = element_rect(linewidth = 1))
# plot how dem ate varies as f'n of caliper hyperparameter
fin %>%
ggplot(aes(x = calips, y = estimate)) +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high)) +
geom_hline(yintercept = 1, linetype = 2) +
labs(x = "Caliper constraint value", y = "HR estimate (Democratic)",
title = "Hazard Ratios for the Discrete Effect of Democratic Status",
subtitle = "By caliper value used in matching procedure") +
theme_minimal() +
theme(axis.line = element_line())
# clean google mobility data
# downloaded on feb 14, 2022
rm(list = ls())
# libraries
library(tidyverse)
library(janitor)
library(tigris)
setwd("C:/Users/eichi/Downloads")
# get mobility data from https://www.google.com/covid19/mobility/
file_wants <-
grep('_US_Region', unzip('Region_Mobility_Report_CSVs.zip', list=TRUE)$Name,
ignore.case=TRUE, value=TRUE)
# unzip only those files
unzip('Region_Mobility_Report_CSVs.zip', files = file_wants)
# load data files
for(i in seq_along(file_wants)){
if(i == 1){
mob2020 <- read_csv(file_wants[i])
}else if(i == 2){
mob2021 <- read_csv(file_wants[i])
}else{
mob2022 <- read_csv(file_wants[i])
}
}
# get 2020 covid data
county_covid_2020 <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us-counties-2020.csv")
# Get 2021 county covid data
county_covid_2021 <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us-counties-2021.csv")
# Get 2022 county covid data
county_covid_2022 <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us-counties-2022.csv")
# row-bind mobility data
mob <-
rbind(mob2020, mob2021, mob2022) %>%
rename(fips = census_fips_code) %>%
select(fips, sub_region_1, sub_region_2, date:residential_percent_change_from_baseline)
# load data files
for(i in seq_along(file_wants)){
if(i == 1){
mob2020 <- read_csv(file_wants[i])
}else if(i == 2){
mob2021 <- read_csv(file_wants[i])
}else{
mob2022 <- read_csv(file_wants[i])
}
}
# row-bind mobility data
mob <-
rbind(mob2020, mob2021, mob2022) %>%
rename(fips = census_fips_code) %>%
select(fips, sub_region_1, sub_region_2, date:residential_percent_change_from_baseline)
# county election returns from mit
creturns <- read_csv("countypres_2000-2020.csv") %>% filter(year == 2016)
# county sociodems from mit
cchars <-
read_csv("https://raw.githubusercontent.com/MEDSL/2018-elections-unoffical/master/election-context-2018.csv") %>%
mutate(fips = ifelse(str_length(fips) == 4,
str_pad(fips, width = 5, side = "left", pad = "0"), fips)) %>%
rename_with(.cols = total_population:ruralurban_cc,
.fn = ~paste(.x, "2018", sep = "_"))
# join county sociodems with election results
cfull <-
creturns %>%
filter(mode == "TOTAL") %>%
select(county_fips, party, candidatevotes, totalvotes) %>%
filter(party == "REPUBLICAN" | party == "DEMOCRAT") %>%
drop_na() %>%
pivot_wider(names_from = party, values_from = candidatevotes) %>%
mutate(rep_frac = REPUBLICAN/totalvotes,
dem_frac = DEMOCRAT/totalvotes,
rep_margin = rep_frac-dem_frac,
elect_winner = ifelse(rep_frac > dem_frac, "Republican", "Democrat")) %>%
arrange(desc(rep_margin)) %>%
left_join(cchars, by = c("county_fips" = "fips")) %>%
mutate(county_fips =
ifelse(str_length(county_fips) == 4,
str_pad(county_fips, 4, "left", "0"), county_fips)) %>%
clean_names()
select <- dplyr::select
# join county sociodems with election results
cfull <-
creturns %>%
filter(mode == "TOTAL") %>%
select(county_fips, party, candidatevotes, totalvotes) %>%
filter(party == "REPUBLICAN" | party == "DEMOCRAT") %>%
drop_na() %>%
pivot_wider(names_from = party, values_from = candidatevotes) %>%
mutate(rep_frac = REPUBLICAN/totalvotes,
dem_frac = DEMOCRAT/totalvotes,
rep_margin = rep_frac-dem_frac,
elect_winner = ifelse(rep_frac > dem_frac, "Republican", "Democrat")) %>%
arrange(desc(rep_margin)) %>%
left_join(cchars, by = c("county_fips" = "fips")) %>%
mutate(county_fips =
ifelse(str_length(county_fips) == 4,
str_pad(county_fips, 4, "left", "0"), county_fips)) %>%
clean_names()
# row-bind mobility data
mob <-
rbind(mob2020, mob2021, mob2022) %>%
rename(fips = census_fips_code) %>%
select(fips, sub_region_1, sub_region_2, date:residential_percent_change_from_baseline)
# get plot of num obs. for counties
mob %>%
count(fips) %>%
filter(!is.na(fips)) %>%
ggplot(aes(x = n)) +
geom_histogram(fill = 'steelblue') +
theme_minimal()
# bind daily covid data
covid <-
rbind(county_covid_2020, county_covid_2021, county_covid_2022) %>%
mutate(fips = str_remove(geoid, "USA-"))
# join to daily mobility
daily_measures <-
covid %>%
left_join(small_mob, by = c('date', 'fips'))
# clean google mobility data
# downloaded on feb 14, 2022
rm(list = ls())
gc()
# libraries
library(tidyverse)
library(janitor)
library(tigris)
select <- dplyr::select
setwd("C:/Users/eichi/Desktop/github_projects/covid_politics_of_mobility_and_morbidity")
# get mobility data from https://www.google.com/covid19/mobility/
file_wants <-
grep('_US_Region', unzip('Region_Mobility_Report_CSVs.zip', list=TRUE)$Name,
ignore.case=TRUE, value=TRUE)
# unzip only those files
unzip('Region_Mobility_Report_CSVs.zip', files = file_wants)
# load data files
for(i in seq_along(file_wants)){
if(i == 1){
mob2020 <- read_csv(file_wants[i])
}else if(i == 2){
mob2021 <- read_csv(file_wants[i])
}else{
mob2022 <- read_csv(file_wants[i])
}
}
# get 2020 covid data
county_covid_2020 <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us-counties-2020.csv")
# Get 2021 county covid data
county_covid_2021 <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us-counties-2021.csv")
# Get 2022 county covid data
county_covid_2022 <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/rolling-averages/us-counties-2022.csv")
# county election returns from mit
creturns <- read_csv("countypres_2000-2020.csv") %>% filter(year == 2016)
# county election returns from mit
creturns <- read_csv("countypres_2000-2020.csv") %>% filter(year == 2016)
# county sociodems from mit
cchars <-
read_csv("https://raw.githubusercontent.com/MEDSL/2018-elections-unoffical/master/election-context-2018.csv") %>%
mutate(fips = ifelse(str_length(fips) == 4,
str_pad(fips, width = 5, side = "left", pad = "0"), fips)) %>%
rename_with(.cols = total_population:ruralurban_cc,
.fn = ~paste(.x, "2018", sep = "_"))
# join county sociodems with election results
cfull <-
creturns %>%
filter(mode == "TOTAL") %>%
select(county_fips, party, candidatevotes, totalvotes) %>%
filter(party == "REPUBLICAN" | party == "DEMOCRAT") %>%
drop_na() %>%
pivot_wider(names_from = party, values_from = candidatevotes) %>%
mutate(rep_frac = REPUBLICAN/totalvotes,
dem_frac = DEMOCRAT/totalvotes,
rep_margin = rep_frac-dem_frac,
elect_winner = ifelse(rep_frac > dem_frac, "Republican", "Democrat")) %>%
arrange(desc(rep_margin)) %>%
left_join(cchars, by = c("county_fips" = "fips")) %>%
mutate(county_fips =
ifelse(str_length(county_fips) == 4,
str_pad(county_fips, 4, "left", "0"), county_fips)) %>%
clean_names()
# row-bind mobility data
mob <-
rbind(mob2020, mob2021, mob2022) %>%
rename(fips = census_fips_code) %>%
select(fips, sub_region_1, sub_region_2, date:residential_percent_change_from_baseline)
# get plot of num obs. for counties
mob %>%
count(fips) %>%
filter(!is.na(fips)) %>%
ggplot(aes(x = n)) +
geom_histogram(fill = 'steelblue') +
theme_minimal()
# bind daily covid data
covid <-
rbind(county_covid_2020, county_covid_2021, county_covid_2022) %>%
mutate(fips = str_remove(geoid, "USA-"))
checl <- read_rds("county_covid_rates_and_mobility.rds")
names(covid)
# join to daily mobility
daily_measures <-
covid %>%
left_join(mob, by = c('date', 'fips'))
names(daily_measures)
cbind(names(daily_measures), names(checl))
cbind(colnames(daily_measures), colnames(checl))
names(daily_measures)
names(checl)
saveRDS(daily_measures, file = "all_data_covid_and_mobility.rds")
# make analysis dataframe for covid paper
rm(list = ls())
# load libraries
library(tidyverse)
library(janitor)
# set wd
setwd("C:/Users/eichi/Desktop/github_projects/covid_politics_of_mobility_and_morbidity")
# load time-series data
cmob <- read_rds("all_data_covid_and_mobility.rds")
# filter counties that have fewer than 825 obs; pull fips and filter for later
ckeep <-
cmob %>%
filter(!is.na(fips) & !is.na(retail_and_recreation_percent_change_from_baseline)) %>%
count(fips) %>%
filter(n >= 825) %>%
pull(fips)
# for each county, get cumulative count of cases
cumcounts <-
cmob %>%
filter(fips %in% ckeep, !is.na(retail_and_recreation_percent_change_from_baseline)) %>%
arrange(fips, date) %>%
rename(retail = retail_and_recreation_percent_change_from_baseline,
groc = grocery_and_pharmacy_percent_change_from_baseline,
work = workplaces_percent_change_from_baseline,
res = residential_percent_change_from_baseline) %>%
mutate(cases = ifelse(cases == -1, 0, cases)) %>%
group_by(fips) %>%
mutate(day_record_start = min(date),
cases_cum = cumsum(cases), deaths_cum = cumsum(deaths),
retail_l1 = lag(retail), retail_l2 = lag(retail_l1)) %>%
ungroup() %>%
mutate(day = as.integer(difftime(date, day_record_start, units = 'days'))) %>%
group_by(fips) %>%
mutate(t0 = min(day[cases_avg_per_100k >= 10], na.rm = TRUE),
tE =
ifelse(is.infinite(min(day[retail >= 0 & retail_l1 >= 0 &
retail_l2 >=0 & day >= t0], na.rm = TRUE)),
max(day[!is.na(retail) & !is.na(retail_l1) & !is.na(retail_l2)], na.rm = TRUE),
min(day[retail >= 0 & retail_l1 >= 0 &
retail_l2 >=0 & day >= t0], na.rm = TRUE)),
surv_time = tE - t0)
# subset to only relevant vars
retail_df <-
cumcounts %>%
select(fips, sub_region_1, sub_region_2, day_record_start, date, day,
t0, tE, surv_time, cases, cases_cum, cases_avg, cases_avg_per_100k,
deaths, deaths_cum, deaths_avg, deaths_avg_per_100k,
retail, retail_l1, retail_l2)
select <- dplyr::select
# for each county, get cumulative count of cases
cumcounts <-
cmob %>%
filter(fips %in% ckeep, !is.na(retail_and_recreation_percent_change_from_baseline)) %>%
arrange(fips, date) %>%
rename(retail = retail_and_recreation_percent_change_from_baseline,
groc = grocery_and_pharmacy_percent_change_from_baseline,
work = workplaces_percent_change_from_baseline,
res = residential_percent_change_from_baseline) %>%
mutate(cases = ifelse(cases == -1, 0, cases)) %>%
group_by(fips) %>%
mutate(day_record_start = min(date),
cases_cum = cumsum(cases), deaths_cum = cumsum(deaths),
retail_l1 = lag(retail), retail_l2 = lag(retail_l1)) %>%
ungroup() %>%
mutate(day = as.integer(difftime(date, day_record_start, units = 'days'))) %>%
group_by(fips) %>%
mutate(t0 = min(day[cases_avg_per_100k >= 10], na.rm = TRUE),
tE =
ifelse(is.infinite(min(day[retail >= 0 & retail_l1 >= 0 &
retail_l2 >=0 & day >= t0], na.rm = TRUE)),
max(day[!is.na(retail) & !is.na(retail_l1) & !is.na(retail_l2)], na.rm = TRUE),
min(day[retail >= 0 & retail_l1 >= 0 &
retail_l2 >=0 & day >= t0], na.rm = TRUE)),
surv_time = tE - t0)
# subset to only relevant vars
retail_df <-
cumcounts %>%
select(fips, sub_region_1, sub_region_2, day_record_start, date, day,
t0, tE, surv_time, cases, cases_cum, cases_avg, cases_avg_per_100k,
deaths, deaths_cum, deaths_avg, deaths_avg_per_100k,
retail, retail_l1, retail_l2)
saveRDS(retail_df, file = "master_county_covid_rates_and_retail_mobility.rds")
# load data
dat <- read_rds("master_county_covid_rates_and_retail_mobility.rds")
covid <- read_rds("county_sociodems_and_elect_returns.rds")
# binary
preempt_bin <-
dat %>%
select(fips, date, day, t0, tE, surv_time, retail, retail_l1, retail_l2) %>%
group_by(fips) %>%
filter(date <= "2020-04-01") %>%
mutate(preempt = ifelse(retail < 0 & retail_l1 < 0 & retail_l2 < 0, 1, 0)) %>%
summarise(preempt_bin = ifelse(1 %in% preempt, 1, 0))
# continuous
preempt_cont <-
dat %>%
select(fips, date, day, t0, tE, surv_time, retail, retail_l1, retail_l2) %>%
group_by(fips) %>%
filter(date <= "2020-04-01") %>%
summarise(preempt_cont = mean(retail[day <= t0], na.rm = TRUE))
# put into political df
# NOTICE -- lots of counties have missing info b/c they have insufficient mobility data
# 'covid' can easily be filtered to exclude these obs., but no points at moment
covid <-
covid %>%
left_join(preempt_bin, by = c('county_fips' = "fips")) %>%
left_join(preempt_cont, by = c('county_fips' = "fips"))
# average preemption as function of vote share
preempt_vshare <-
covid %>%
mutate(elect_winner = ifelse(rep_frac > dem_frac, "Republican", "Democrat")) %>%
filter(!is.na(elect_winner)) %>%
ggplot(aes(x = rep_frac, y = preempt_cont, col = elect_winner, group = 1)) +
geom_point() +
geom_smooth() +
scale_color_manual(name = "Election winner", values = c("dodgerblue", "firebrick")) +
labs(x = "Fraction of votes for Trump, 2016",
y = "Average mobility score",
title = "Preempting COVID-19: Average Mobility Scores \nBetween March 13 and April 1, 2020") +
theme_minimal() +
theme(axis.line = element_line())
preempt_vshare
